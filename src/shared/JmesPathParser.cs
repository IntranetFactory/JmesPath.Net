// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 0.1.0.0
// Machine:  DESKTOP-UQ0H65F
// DateTime: 06/03/2017 13:45:14
// Input file <C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y - 06/03/2017 13:43:16>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using StarodubOleg.GPPG.Runtime;

namespace DevLab.JmesPath
{
internal enum TokenType {error=2,EOF=3,T_COLON=4,T_COMMA=5,T_DOT=6,
    T_HASHWILDCARD=7,T_LISTWILDCARD=8,T_NUMBER=9,T_LBRACE=10,T_RBRACE=11,T_LBRACKET=12,
    T_RBRACKET=13,T_LSTRING=14,T_QSTRING=15,T_RSTRING=16,T_USTRING=17};

internal partial struct ValueType
#line 7 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
        { 
       		public Token Token; 
       	}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "0.1.0.0")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "0.1.0.0")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "0.1.0.0")]
internal partial class JmesPathParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[49];
  private static State[] states = new State[63];
  private static string[] nonTerms = new string[] {
      "expression", "$accept", "expression_impl", "sub_expression", "index_expression", 
      "hash_wildcard", "identifier", "multi_select_list", "multi_select_hash", 
      "literal", "raw_string", "sub_expression_impl", "bracket_specifier", "slice_expression", 
      "keyval_expressions", "keyval_expression", "expressions", "identifier_impl", 
      "quoted_string", "unquoted_string", };

  static JmesPathParser() {
    states[0] = new State(new int[]{12,46,8,40,7,52,15,10,17,12,10,13,14,57,16,59},new int[]{-1,1,-3,41,-4,42,-12,43,-5,44,-13,45,-6,51,-7,53,-18,8,-19,9,-20,11,-8,54,-9,55,-10,56,-11,58});
    states[1] = new State(new int[]{3,2,6,3,12,22,8,40},new int[]{-13,21});
    states[2] = new State(-1);
    states[3] = new State(new int[]{15,10,17,12,10,13,12,62,7,52},new int[]{-7,4,-9,5,-8,6,-6,7,-18,8,-19,9,-20,11});
    states[4] = new State(-12);
    states[5] = new State(-13);
    states[6] = new State(-14);
    states[7] = new State(-15);
    states[8] = new State(-41);
    states[9] = new State(-42);
    states[10] = new State(-45);
    states[11] = new State(-43);
    states[12] = new State(-46);
    states[13] = new State(new int[]{15,10,17,12},new int[]{-15,14,-16,61,-7,18,-18,8,-19,9,-20,11});
    states[14] = new State(new int[]{11,15,5,16});
    states[15] = new State(-22);
    states[16] = new State(new int[]{15,10,17,12},new int[]{-16,17,-7,18,-18,8,-19,9,-20,11});
    states[17] = new State(-24);
    states[18] = new State(new int[]{4,19});
    states[19] = new State(new int[]{12,46,8,40,7,52,15,10,17,12,10,13,14,57,16,59},new int[]{-1,20,-3,41,-4,42,-12,43,-5,44,-13,45,-6,51,-7,53,-18,8,-19,9,-20,11,-8,54,-9,55,-10,56,-11,58});
    states[20] = new State(new int[]{6,3,12,22,8,40,11,-25,5,-25},new int[]{-13,21});
    states[21] = new State(-16);
    states[22] = new State(new int[]{9,23,13,33,4,34},new int[]{-14,31});
    states[23] = new State(new int[]{13,24,4,25});
    states[24] = new State(-18);
    states[25] = new State(new int[]{4,26,9,28,13,-30});
    states[26] = new State(new int[]{9,27,13,-31});
    states[27] = new State(-35);
    states[28] = new State(new int[]{4,29,13,-32});
    states[29] = new State(new int[]{9,30,13,-33});
    states[30] = new State(-34);
    states[31] = new State(new int[]{13,32});
    states[32] = new State(-20);
    states[33] = new State(-21);
    states[34] = new State(new int[]{9,35,4,38,13,-29});
    states[35] = new State(new int[]{4,36,13,-36});
    states[36] = new State(new int[]{9,37,13,-37});
    states[37] = new State(-38);
    states[38] = new State(new int[]{9,39,13,-40});
    states[39] = new State(-39);
    states[40] = new State(-19);
    states[41] = new State(-2);
    states[42] = new State(-3);
    states[43] = new State(-11);
    states[44] = new State(-4);
    states[45] = new State(-17);
    states[46] = new State(new int[]{9,23,13,33,4,34,12,46,8,40,7,52,15,10,17,12,10,13,14,57,16,59},new int[]{-14,31,-17,47,-1,60,-3,41,-4,42,-12,43,-5,44,-13,45,-6,51,-7,53,-18,8,-19,9,-20,11,-8,54,-9,55,-10,56,-11,58});
    states[47] = new State(new int[]{13,48,5,49});
    states[48] = new State(-26);
    states[49] = new State(new int[]{12,46,8,40,7,52,15,10,17,12,10,13,14,57,16,59},new int[]{-1,50,-3,41,-4,42,-12,43,-5,44,-13,45,-6,51,-7,53,-18,8,-19,9,-20,11,-8,54,-9,55,-10,56,-11,58});
    states[50] = new State(new int[]{6,3,12,22,8,40,13,-28,5,-28},new int[]{-13,21});
    states[51] = new State(-5);
    states[52] = new State(-44);
    states[53] = new State(-6);
    states[54] = new State(-7);
    states[55] = new State(-8);
    states[56] = new State(-9);
    states[57] = new State(-47);
    states[58] = new State(-10);
    states[59] = new State(-48);
    states[60] = new State(new int[]{6,3,12,22,8,40,13,-27,5,-27},new int[]{-13,21});
    states[61] = new State(-23);
    states[62] = new State(new int[]{12,46,8,40,7,52,15,10,17,12,10,13,14,57,16,59},new int[]{-17,47,-1,60,-3,41,-4,42,-12,43,-5,44,-13,45,-6,51,-7,53,-18,8,-19,9,-20,11,-8,54,-9,55,-10,56,-11,58});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-5});
    rules[5] = new Rule(-3, new int[]{-6});
    rules[6] = new Rule(-3, new int[]{-7});
    rules[7] = new Rule(-3, new int[]{-8});
    rules[8] = new Rule(-3, new int[]{-9});
    rules[9] = new Rule(-3, new int[]{-10});
    rules[10] = new Rule(-3, new int[]{-11});
    rules[11] = new Rule(-4, new int[]{-12});
    rules[12] = new Rule(-12, new int[]{-1,6,-7});
    rules[13] = new Rule(-12, new int[]{-1,6,-9});
    rules[14] = new Rule(-12, new int[]{-1,6,-8});
    rules[15] = new Rule(-12, new int[]{-1,6,-6});
    rules[16] = new Rule(-5, new int[]{-1,-13});
    rules[17] = new Rule(-5, new int[]{-13});
    rules[18] = new Rule(-13, new int[]{12,9,13});
    rules[19] = new Rule(-13, new int[]{8});
    rules[20] = new Rule(-13, new int[]{12,-14,13});
    rules[21] = new Rule(-13, new int[]{12,13});
    rules[22] = new Rule(-9, new int[]{10,-15,11});
    rules[23] = new Rule(-15, new int[]{-16});
    rules[24] = new Rule(-15, new int[]{-15,5,-16});
    rules[25] = new Rule(-16, new int[]{-7,4,-1});
    rules[26] = new Rule(-8, new int[]{12,-17,13});
    rules[27] = new Rule(-17, new int[]{-1});
    rules[28] = new Rule(-17, new int[]{-17,5,-1});
    rules[29] = new Rule(-14, new int[]{4});
    rules[30] = new Rule(-14, new int[]{9,4});
    rules[31] = new Rule(-14, new int[]{9,4,4});
    rules[32] = new Rule(-14, new int[]{9,4,9});
    rules[33] = new Rule(-14, new int[]{9,4,9,4});
    rules[34] = new Rule(-14, new int[]{9,4,9,4,9});
    rules[35] = new Rule(-14, new int[]{9,4,4,9});
    rules[36] = new Rule(-14, new int[]{4,9});
    rules[37] = new Rule(-14, new int[]{4,9,4});
    rules[38] = new Rule(-14, new int[]{4,9,4,9});
    rules[39] = new Rule(-14, new int[]{4,4,9});
    rules[40] = new Rule(-14, new int[]{4,4});
    rules[41] = new Rule(-7, new int[]{-18});
    rules[42] = new Rule(-18, new int[]{-19});
    rules[43] = new Rule(-18, new int[]{-20});
    rules[44] = new Rule(-6, new int[]{7});
    rules[45] = new Rule(-19, new int[]{15});
    rules[46] = new Rule(-20, new int[]{17});
    rules[47] = new Rule(-10, new int[]{14});
    rules[48] = new Rule(-11, new int[]{16});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)TokenType.error, (int)TokenType.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expression -> expression_impl
#line 32 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnExpression();
					}
#line default
        break;
      case 11: // sub_expression -> sub_expression_impl
#line 48 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSubExpression();
					}
#line default
        break;
      case 16: // index_expression -> expression, bracket_specifier
#line 61 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("index expression (expression, bracket_specifier): {0}.", ValueStack[ValueStack.Depth-2].Token);
						OnIndexExpression();
					}
#line default
        break;
      case 18: // bracket_specifier -> T_LBRACKET, T_NUMBER, T_RBRACKET
#line 69 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("bracket_specifier (index): {0}.", ValueStack[ValueStack.Depth-2].Token);
						OnIndex(ValueStack[ValueStack.Depth-2].Token);
					}
#line default
        break;
      case 19: // bracket_specifier -> T_LISTWILDCARD
#line 74 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("bracket_specifier (list wildcard projection).");
						OnListWildcardProjection();
					}
#line default
        break;
      case 21: // bracket_specifier -> T_LBRACKET, T_RBRACKET
#line 80 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("bracket_specifier (flattening projection).");
						OnFlattenProjection();
					}
#line default
        break;
      case 22: // multi_select_hash -> T_LBRACE, keyval_expressions, T_RBRACE
#line 87 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						PopMultiSelectHash();
					}
#line default
        break;
      case 23: // keyval_expressions -> keyval_expression
#line 92 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						PushMultiSelectHash();
						AddMultiSelectHashExpression();
					}
#line default
        break;
      case 24: // keyval_expressions -> keyval_expressions, T_COMMA, keyval_expression
#line 97 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						AddMultiSelectHashExpression();
					}
#line default
        break;
      case 26: // multi_select_list -> T_LBRACKET, expressions, T_RBRACKET
#line 107 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						PopMultiSelectList();
					}
#line default
        break;
      case 27: // expressions -> expression
#line 113 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						PushMultiSelectList();
						AddMultiSelectListExpression();
					}
#line default
        break;
      case 28: // expressions -> expressions, T_COMMA, expression
#line 118 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						AddMultiSelectListExpression();
					}
#line default
        break;
      case 29: // slice_expression -> T_COLON
#line 124 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(null, null, null);
					}
#line default
        break;
      case 30: // slice_expression -> T_NUMBER, T_COLON
#line 128 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(ValueStack[ValueStack.Depth-2].Token, null, null);
					}
#line default
        break;
      case 31: // slice_expression -> T_NUMBER, T_COLON, T_COLON
#line 132 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(ValueStack[ValueStack.Depth-3].Token, null, null);
					}
#line default
        break;
      case 32: // slice_expression -> T_NUMBER, T_COLON, T_NUMBER
#line 136 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(ValueStack[ValueStack.Depth-3].Token, ValueStack[ValueStack.Depth-1].Token, null);
					}
#line default
        break;
      case 33: // slice_expression -> T_NUMBER, T_COLON, T_NUMBER, T_COLON
#line 140 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(ValueStack[ValueStack.Depth-4].Token, ValueStack[ValueStack.Depth-2].Token, null);
					}
#line default
        break;
      case 34: // slice_expression -> T_NUMBER, T_COLON, T_NUMBER, T_COLON, T_NUMBER
#line 144 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(ValueStack[ValueStack.Depth-5].Token, ValueStack[ValueStack.Depth-3].Token, ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
      case 35: // slice_expression -> T_NUMBER, T_COLON, T_COLON, T_NUMBER
#line 148 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(ValueStack[ValueStack.Depth-4].Token, null, ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
      case 36: // slice_expression -> T_COLON, T_NUMBER
#line 152 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(null, ValueStack[ValueStack.Depth-1].Token, null);
					}
#line default
        break;
      case 37: // slice_expression -> T_COLON, T_NUMBER, T_COLON
#line 156 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(null, ValueStack[ValueStack.Depth-2].Token, null);
					}
#line default
        break;
      case 38: // slice_expression -> T_COLON, T_NUMBER, T_COLON, T_NUMBER
#line 160 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(null, ValueStack[ValueStack.Depth-3].Token, ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
      case 39: // slice_expression -> T_COLON, T_COLON, T_NUMBER
#line 164 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(null, null, ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
      case 40: // slice_expression -> T_COLON, T_COLON
#line 168 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						OnSliceExpression(null, null, null);
					}
#line default
        break;
      case 41: // identifier -> identifier_impl
#line 174 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("identifier ({0}): {1}.", ValueStack[ValueStack.Depth-1].Token.Type, ValueStack[ValueStack.Depth-1].Token);
						OnIdentifier(ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
      case 44: // hash_wildcard -> T_HASHWILDCARD
#line 185 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("wildcard (hash wildcard projection): {0}", ValueStack[ValueStack.Depth-1].Token);
						OnHashWildcardProjection();
					}
#line default
        break;
      case 47: // literal -> T_LSTRING
#line 198 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("literal string : {0}", ValueStack[ValueStack.Depth-1].Token);
						OnLiteralString(ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
      case 48: // raw_string -> T_RSTRING
#line 204 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
     {
						System.Diagnostics.Debug.WriteLine("raw string : {0}", ValueStack[ValueStack.Depth-1].Token);
						OnRawString(ValueStack[ValueStack.Depth-1].Token);
					}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((TokenType)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((TokenType)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 210 "C:\Projects\jjme\src\jmespath.net/../shared/JmesPathParser.y"
 #line default
}
}
